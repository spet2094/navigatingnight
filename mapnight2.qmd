# Lab 2 {#sec-mapnight1 .unnumbered}

Now that we know the basics of how to load, project, crop and mask raster data, as well as join it to other point data. Let's look at something a bit more advanced. 

There are hints along the way to make the section simpler.

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Provides various utility functions for R programming.
library(R.utils)
# For data manipulation and transformation.
library(dplyr)
# Spatial data
library(sf)
# Popular data visualization package in R.  
library(ggplot2)
# For creating thematic maps 
library(tmap)
# Color palettes suitable for data visualization, especially for those with color vision deficiencies.
library(viridis)
# A collection of color palettes for data visualization.
library(RColorBrewer)
# For working with raster data, such as gridded spatial data like satellite imagery or elevation data.
library(raster)
# An alternative to the 'raster' package and is used for working with large raster datasets efficiently.
library(terra)
# Tools for extracting data from raster layers at exact locations, often used in spatial analysis.
library(exactextractr)
# Common methods of the tidyverse packages for objects created with the {terra} package: SpatRaster and SpatVector
library(tidyterra)
# Querying Open Street Map data
library(osmdata)
```

## Some useful functions

To start this exercise, let's see some useful functions to manipulate data in R.

```{r output=FALSE}

# Before we get to clean the data, let's go over a few useful function

# list files 
list.files()

# list files in a specific folder
list.files(file.path("data/Kenya_Tanzania"))

# list files corresponding to a specific pattern ("shp" in the filename)
list.files(file.path("data/Kenya_Tanzania"), pattern = "shp")

# list files corresponding to a specific pattern ("shp" at the end of the filename)
shps <- list.files("data/Kenya_Tanzania", pattern = "*.shp")

# we can also select strings following a pattern inside a list or vector using grepl
shps <- shps[grepl("Kenya_Tanzania", shps)] 

# let's extract the first element of the list "shps"
file1 <- shps[1]
file1

# how many characters in the filename
nchar(file1)

# let's remove the last 4 charcters (the file extension)
file1_short <- substr(file1, 1, nchar(file1)-4)

# let's add something to the name (concatenate strings) - for example, a new extension ".tif"
paste(file1_short, ".tif", sep="")

# finally let's create a function MathOperations that first calculate the square and then add 3
MathOperations <- function(x) {
  sq <- x^2
  z <- sq+3
  return(z)
}

# try the function on 4, 5, 6
MathOperations(4)
MathOperations(5)
MathOperations(6)

# repeat this operation for the vector 4 to 6 (similar to a loop in STATA)
lapply(4:6, function(x) MathOperations(x))


```

## Download data

::: {.callout-note title="Download the Data"}

We need to download some raster data. NOAA has made nighttime lights data available for 1992 to 2013. It is called the Version 4 DMSP-OLS Nighttime Lights Time Series. The files are cloud-free composites made using all the available archived DMSP-OLS smooth resolution data for calendar years. In cases where two satellites were collecting data - two composites were produced. The products are 30 arc-second grids, spanning -180 to 180 degrees longitude and -65 to 75 degrees latitude. 

We can download the [Average, Visible, Stable Lights, & Cloud Free Coverages for 1992 and 2013](https://www.ngdc.noaa.gov/eog/data/web_data/v4composites/) and put them in the `data/Kenya_Tanzania` folder.

:::


::: callout-important
The downloaded files are going to be in a **"TAR" format**. A TAR file is an archive created by tar, a Unix-based utility used to package files together for backup or distribution purposes. It contains multiple files stored in an uncompressed format along with metadata about the archive. Tars files are also used to reduce files' size. TAR archives compressed with GNU Zip compression may become GZ, .TAR.GZ, or .TGZ files. We need to decompress them before using them.
:::

Before you move forward **download the data for 1992 and 2013.** It is also good practice to create a scratch folder where you do all your unzipping.

In our example, we will only download two years, but generally, you will have to repeat the same cleaning operations many times. Therefore, to speed up the process, we are going to create a new function. The function is going to:

1.  Decompress the files using the `untar` command,

2.  List the decompressed files using `list.files` command (notice there are compressed files inside the TAR archive)

3.  Identify the TIF archive files using `grepl`

4.  Decompress using the `gunzip` command.

We are then going to run the function on all the TAR files.

::: callout-note
You can do these steps manually if you can't get the below chunk to work.
:::

```{r downloadunzip, message=FALSE}
datafolder <- file.path("./data") # define the location of the data folder

# list downloaded files: they are compressed files using the "tar" format
tars <- list.files(file.path("data/Kenya_Tanzania/scratch"), pattern = "*.tar")

# unzip
UnzipSelect <- function(i) {
  untar(file.path(datafolder,"Kenya_Tanzania/scratch",i), exdir = file.path(datafolder, "Kenya_Tanzania/scratch")) # unzip
  all.files <- list.files(file.path(datafolder,"Kenya_Tanzania/scratch"), pattern = paste0(substr(i, 6, 12), "*")) # list extracted files
  gz <- all.files[grepl("web.stable_lights.avg_vis.tif.gz", all.files)] # select the TIF files
  R.utils::gunzip(filename	= file.path(datafolder,"Kenya_Tanzania/scratch", gz),
                  destname = file.path(datafolder,"Kenya_Tanzania", substr(gz, 1, nchar(gz) -3)),
                  overwrite = TRUE) # unzip again
}

# loop over the TAR files
# note that the function returns the last element created - in this example, the TIF files
nl <- lapply(tars, UnzipSelect)

# you can delete the scratch folder with the data we don't need
#unlink(file.path(datafolder,"Kenya_Tanzania/scratch"), recursive = TRUE)
```

We can load and plot the nighttime lights data. When working with many rasters of the same origin, it is usually faster to stack them together for faster processing.

```{r nightlightststats}
# load NL
# we apply the function raster to each tif file to load the raster in the workspace
nl_rasters <- lapply(nl, raster)
# we stack the raster (only possible for rasters of the same extent and definition)
nl_rasters_stack <- stack(nl_rasters)
# plot the result
plot(nl_rasters_stack,  
     main=c("Nightlights 1992", "Nightlights 2013"),
     axes=FALSE)
# change the names 
names(nl_rasters_stack) <- c("NL1992", "NL2013")
```

::: {.callout-note title="Question"}

Why can't you see much? Discuss with the person next to you.

:::


## Country shapefiles

The second step is to download the shapefiles for Kenya and Tanzania. GADM has made available national and subnational shapefiles for the world. The zips you download, such as *gadm36_KEN_shp.zip* from GADM should be placed in the **Kenya_Tanzania** folder. This is the link [GADM](https://gadm.org/formats.html).

```{r loadshp, output=FALSE}
# list country shp that we downloaded from the GADM website
files <- list.files(file.path(datafolder,"Kenya_Tanzania"), pattern = "_shp.zip*", recursive = TRUE, full.names = TRUE)
files

# create a scratch folder
# dir.create(file.path(datafolder,"Kenya_Tanzania/scratch"))

# unzip
lapply(files, function(x) unzip(x, exdir = file.path(datafolder,"Kenya_Tanzania/scratch")))

# GADM has shapefiles for different regional levels (e.g. country, region, district, ward) 
gadm_files <- list.files(file.path(datafolder,"Kenya_Tanzania"), pattern = "gadm*", recursive = TRUE, full.names = TRUE)
gadm_files

# let's select regional level 2
gadm_files_level2 <- gadm_files[grepl("2.shp", gadm_files)]
gadm_files_level2

# load the shapefiles
shps <- lapply(gadm_files_level2, read_sf)
shps

# delete the scratch folder with the data we don't need
# unlink(file.path(datafolder,"Kenya_Tanzania/scratch"), recursive = TRUE)
```

## Zonal statistics

We use the package `exactextractr` to calculate the sum and average nighttime for each region. The nighttime lights rasters are quite large, but as we do not need to do any operations on them (e.g. calculations using the overlay function, cropping or masking to the shapefiles extent), the process should be relatively fast.

Again, we use the `lapply` function to process the two countries successively.

```{r zonalstats}
# summarize
ex <- lapply(shps, function(x) exact_extract(nl_rasters_stack, x, c("sum", "mean", "count"), progress = FALSE))
# lapply returns a list of two dataframes, we can use "do.call" to return each element of the list and iterate the function rbind
# the results is a dataframe with the merged rows of the dataframes
ex <- do.call("rbind", ex)

# show first files
head(ex)

# summary
summary(ex)
```

## Merge shapefiles

Even though it is not necessary here, we can merge the shapefile to visualize all the regions at once.

Usually, it is easier to process data in small chunks using a function like `sapply`, `lapply`, `mapply` or a loop before merging. For example, when doing zonal statistics, it is faster and easier to process one country at a time and then combine the resulting tables. If you have access to a computer with multiple cores, it is also possible to do "parallel processing" to process each chunk at the same time in parallel.

```{r merge shapefile}

# merge together
# we select each sf object and merge the rows
# do.call() in R to apply a given function to a list as a whole
# The rbind()  function can be used to bind or combine several vectors, matrices, or data frames by rows
tza_ken <- do.call("rbind", shps)

# inspect
str(tza_ken)

# plot
plot(tza_ken$geometry)

```

## Visualize

Let's have a first look at our result.

```{r plotnl}
# merge back with shapefile attribute table
# this time instead of merging the rows, we append the columns using cbind
df <- cbind(tza_ken, ex)

# Create a map object for "mean.NL1992"
map1992 <- tm_shape(df) +
  tm_fill(col = "mean.NL1992", palette = "seq", style = "jenks", title = "Mean 1992") +
  tm_layout(aes.palette = list(seq = "-YlGnBu"))

# Create a map object for "mean.NL2013"
map2013 <- tm_shape(df) +
  tm_fill(col = "mean.NL2013", palette = "seq", title = "Mean 2013") +
  tm_layout(aes.palette = list(seq = "-YlGnBu"))

# Plot both maps side by side
tmap_arrange(map1992, map2013)

```

Most of the Kenya and Tanzania have really low values. To make the maps tell a story, we can use fixed breaks and make the maps interactive using the `tmap` package:

```{r prettymap}
tmap_mode("view") # switch to other mode: ttm()

tm_shape(df) +
  tm_fill(c("mean.NL1992", "mean.NL2013"), title=c("Average nightlights"), style="fixed", palette = "seq", breaks=c(0, 0.05, 0.1, 2, 63)) +
  tm_layout(aes.palette = list(seq = "-YlGnBu"), legend.outside = TRUE, legend.outside.position = "right") +
  tm_facets(sync = TRUE, ncol = 2) +
  tm_borders()

```

::: {.callout-note title="Question"}

Have a think about what the data is telling you. What's the story?

:::


## Resources

-   Downloading [night lights](https://github.com/walshc/nightlights/tree/master/R)

-   The package [`nightlightstats`](https://github.com/JakobMie/nightlightstats)
